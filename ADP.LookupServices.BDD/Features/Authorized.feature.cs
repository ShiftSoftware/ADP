// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace LookupServices.BDD.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AuthorizedVehiclesFeature : object, global::Xunit.IClassFixture<AuthorizedVehiclesFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Authorized Vehicles", @"Authorized & Unauthorized Cars
	A car is considered ""Authorized"" or ""Official"" if it is imported by the official distributor for a specific geographic region.
	In contrast, cars not imported by the official distributor are considered ""Unauthorized"", ""Unofficial"", or ""Grey Imports"".", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Authorized.feature"
#line hidden
        
        public AuthorizedVehiclesFeature(AuthorizedVehiclesFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/Authorized.feature.ndjson", 6);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Authorized From Initial Stock")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Authorized Vehicles")]
        [global::Xunit.TraitAttribute("Description", "Authorized From Initial Stock")]
        public async global::System.Threading.Tasks.Task AuthorizedFromInitialStock()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Authorized From Initial Stock", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 6
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "VIN"});
                table1.AddRow(new string[] {
                            "1FMZU72E12UB00984"});
                table1.AddRow(new string[] {
                            "1FMCU0F73AKB12345"});
#line 7
 await testRunner.GivenAsync("a dealer with the following vehicles as initial stock:", ((string)(null)), table1, "Given ");
#line hidden
#line 11
 await testRunner.WhenAsync("Checking \"1FMZU72E12UB00984\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
 await testRunner.ThenAsync("The Vehicle is considered Authroized", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Authorized From Dealer Stock (Dealer DMS)")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Authorized Vehicles")]
        [global::Xunit.TraitAttribute("Description", "Authorized From Dealer Stock (Dealer DMS)")]
        public async global::System.Threading.Tasks.Task AuthorizedFromDealerStockDealerDMS()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Authorized From Dealer Stock (Dealer DMS)", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 14
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "VIN"});
                table2.AddRow(new string[] {
                            "1FDKF37GXVEB34368"});
                table2.AddRow(new string[] {
                            "1FTFW1EFXEKD12345"});
#line 15
 await testRunner.GivenAsync("a dealer with the following vehicles in their dealer stock (coming from their DMS" +
                        "):", ((string)(null)), table2, "Given ");
#line hidden
#line 19
 await testRunner.WhenAsync("Checking \"1FDKF37GXVEB34368\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
 await testRunner.ThenAsync("The Vehicle is considered Authroized", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Authorized From SSC")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Authorized Vehicles")]
        [global::Xunit.TraitAttribute("Description", "Authorized From SSC")]
        public async global::System.Threading.Tasks.Task AuthorizedFromSSC()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Authorized From SSC", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 22
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "VIN"});
                table3.AddRow(new string[] {
                            "1G1ZC5E17BF283048"});
#line 23
 await testRunner.GivenAsync("a dealer with the following vehicles in official SSC Vehciles (Provided by the ve" +
                        "hicle manufacturer):", ((string)(null)), table3, "Given ");
#line hidden
#line 26
 await testRunner.WhenAsync("Checking \"1G1ZC5E17BF283048\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
 await testRunner.ThenAsync("The Vehicle is considered Authroized", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Unauthorized")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Authorized Vehicles")]
        [global::Xunit.TraitAttribute("Description", "Unauthorized")]
        public async global::System.Threading.Tasks.Task Unauthorized()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Unauthorized", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 30
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "VIN"});
                table4.AddRow(new string[] {
                            "2C3CCAGG1DH549029"});
#line 31
 await testRunner.GivenAsync("a dealer with the following vehicles in their dealer stock (coming from their DMS" +
                        "):", ((string)(null)), table4, "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "VIN"});
                table5.AddRow(new string[] {
                            "1HGCD5630TA078763"});
#line 34
 await testRunner.AndAsync("a dealer with the following vehicles in official SSC Vehciles (Provided by the ve" +
                        "hicle manufacturer):", ((string)(null)), table5, "And ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "VIN"});
                table6.AddRow(new string[] {
                            "1FDKF37G8VEB34451"});
#line 37
 await testRunner.AndAsync("a dealer with the following vehicles as initial stock:", ((string)(null)), table6, "And ");
#line hidden
#line 40
 await testRunner.WhenAsync("Checking \"WMWZB3C55BWM46667\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
 await testRunner.ThenAsync("The Vehicle is considered Unauthroized", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
 await testRunner.WhenAsync("Checking \"1FMYU60EXYUA30399\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
 await testRunner.ThenAsync("The Vehicle is considered Unauthroized", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 44
 await testRunner.WhenAsync("Checking \"5GAKRBKD5EJ376173\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
 await testRunner.ThenAsync("The Vehicle is considered Unauthroized", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 46
 await testRunner.WhenAsync("Checking \"3VWCD21Y33M352232\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
 await testRunner.ThenAsync("The Vehicle is considered Unauthroized", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AuthorizedVehiclesFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AuthorizedVehiclesFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
